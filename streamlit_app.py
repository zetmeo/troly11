import streamlit as st
from openai import OpenAI
import os

# H√†m ƒë·ªçc n·ªôi dung t·ª´ file vƒÉn b·∫£n
def rfile(name_file):
    with open(name_file, "r", encoding="utf-8") as file:
        return file.read()

# Hi·ªÉn th·ªã logo (n·∫øu c√≥)
try:
    col1, col2, col3 = st.columns([3, 2, 3])
    with col2:
        st.image("logo.png", use_container_width=True)
except:
    pass

# Hi·ªÉn th·ªã ti√™u ƒë·ªÅ
title_content = rfile("00.xinchao.txt")
st.markdown(
    f"""<h1 style="text-align: center; font-size: 24px;">{title_content}</h1>""",
    unsafe_allow_html=True
)

# L·∫•y OpenAI API key t·ª´ st.secrets
openai_api_key = st.secrets.get("OPENAI_API_KEY")

# Kh·ªüi t·∫°o OpenAI client
client = OpenAI(api_key=openai_api_key)

# Kh·ªüi t·∫°o tin nh·∫Øn "system" v√† "assistant"
INITIAL_SYSTEM_MESSAGE = {"role": "system", "content": rfile("01.system_trainning.txt")}
INITIAL_ASSISTANT_MESSAGE = {"role": "assistant", "content": rfile("02.assistant.txt")}

# Ki·ªÉm tra n·∫øu ch∆∞a c√≥ session l∆∞u tr·ªØ th√¨ kh·ªüi t·∫°o tin nh·∫Øn ban ƒë·∫ßu
if "messages" not in st.session_state:
    st.session_state.messages = [INITIAL_SYSTEM_MESSAGE, INITIAL_ASSISTANT_MESSAGE]

# CSS ƒë·ªÉ cƒÉn ch·ªânh tr·ª£ l√Ω b√™n tr√°i, ng∆∞·ªùi h·ªèi b√™n ph·∫£i, v√† th√™m icon tr·ª£ l√Ω
st.markdown(
    """
    <style>
        .assistant {
            padding: 10px;
            border-radius: 10px;
            max-width: 75%;
            background: none; /* M√†u trong su·ªët */
            text-align: left;
        }
        .user {
            padding: 10px;
            border-radius: 10px;
            max-width: 75%;
            background: none; /* M√†u trong su·ªët */
            text-align: right;
            margin-left: auto;
        }
        .assistant::before { content: "ü§ñ "; font-weight: bold; }
    </style>
    """,
    unsafe_allow_html=True
)

# Hi·ªÉn th·ªã l·ªãch s·ª≠ tin nh·∫Øn (lo·∫°i b·ªè system ƒë·ªÉ tr√°nh hi·ªÉn th·ªã)
for message in st.session_state.messages:
    if message["role"] == "assistant":
        st.markdown(f'<div class="assistant">{message["content"]}</div>', unsafe_allow_html=True)
    elif message["role"] == "user":
        st.markdown(f'<div class="user">{message["content"]}</div>', unsafe_allow_html=True)

# √î nh·∫≠p li·ªáu cho ng∆∞·ªùi d√πng
if prompt := st.chat_input("S·∫øp nh·∫≠p n·ªôi dung c·∫ßn trao ƒë·ªïi ·ªü ƒë√¢y nh√©?"):
    # L∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng v√†o session
    st.session_state.messages.append({"role": "user", "content": prompt})
    st.markdown(f'<div class="user">{prompt}</div>', unsafe_allow_html=True)

    # T·∫°o ph·∫£n h·ªìi t·ª´ API OpenAI
    response = ""
    stream = client.chat.completions.create(
        model=rfile("module_chatgpt.txt").strip(),
        messages=[{"role": m["role"], "content": m["content"]} for m in st.session_state.messages],
        stream=True,
    )

    # Ghi l·∫°i ph·∫£n h·ªìi c·ªßa tr·ª£ l√Ω v√†o bi·∫øn
    for chunk in stream:
        if chunk.choices:
            response += chunk.choices[0].delta.content or ""

    # Hi·ªÉn th·ªã ph·∫£n h·ªìi c·ªßa tr·ª£ l√Ω
    st.markdown(f'<div class="assistant">{response}</div>', unsafe_allow_html=True)

    # C·∫≠p nh·∫≠t l·ªãch s·ª≠ tin nh·∫Øn trong session
    st.session_state.messages.append({"role": "assistant", "content": response})